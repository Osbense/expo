{"version":3,"file":"functions.js","sourceRoot":"","sources":["../src/functions.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Dimensions,\n  EmitterSubscription,\n  Platform,\n  findNodeHandle,\n} from 'react-native';\nimport { Constants } from 'expo-constants';\nimport { EventEmitter, NativeModulesProxy } from 'expo-core';\n\nimport {\n  AnchorEventType,\n  EventType,\n  HitTestResultTypes,\n  PlaneDetection,\n  TrackingState,\n  TrackingStateReason,\n  TrackingConfiguration,\n  WorldAlignment,\n} from './enums';\nimport {\n  Anchor,\n  ARFrameRequest,\n  ARFrame,\n  ARMatrices,\n  DetectionImage,\n  HitTestResults,\n  Matrix,\n  VideoFormat,\n  Vector2,\n} from './types';\n\nconst ExpoAR = NativeModulesProxy.ExpoAR;\nconst AREventEmitter = new EventEmitter(ExpoAR);\n\nexport function isAvailable(): boolean {\n  // if (\n  //   !Constants.isDevice || // Prevent Simulators\n  //   Platform.isTVOS ||\n  //   (Platform.OS === 'ios' && Constants.deviceYearClass < 2015) || // iOS device has A9 chip\n  //   // !ExpoAR.isSupported || // ARKit is included in the build\n  //   !ExpoAR.startAsync // Older SDK versions (27 and lower) that are fully compatible\n  // ) {\n  //   console.log('AR.isAvailable: false');\n  //   return false;\n  // }\n\n  return true;\n}\n\nconst AvailabilityErrorMessages = {\n  Simulator: `Cannot run EXGL in a simulator`,\n  ANineChip: `ARKit can only run on iOS devices with A9 (2015) or greater chips! This is a`,\n  ARKitOnlyOnIOS: `ARKit can only run on an iOS device! This is a`,\n};\n\nexport function getUnavailabilityReason(): string {\n  if (!Constants.isDevice) {\n    return AvailabilityErrorMessages.Simulator;\n  } else if (Platform.OS !== 'ios') {\n    return `${AvailabilityErrorMessages.ARKitOnlyOnIOS} ${Platform.OS} device`;\n  } else if (Constants.deviceYearClass < 2015) {\n    return `${AvailabilityErrorMessages.ANineChip} ${Constants.deviceYearClass} device`;\n  }\n  return 'Unknown Reason';\n}\n\nexport function onFrameDidUpdate(\n  listener: (event: {}) => void\n): EmitterSubscription {\n  return _addListener(EventType.FrameDidUpdate, listener);\n}\n\nexport function onDidFailWithError(\n  listener: (event: { error: Error }) => void\n): EmitterSubscription {\n  return _addListener(EventType.DidFailWithError, listener);\n}\n\nexport function onAnchorsDidUpdate(\n  listener: (event: { eventType: AnchorEventType; anchors: Anchor[] }) => void\n): EmitterSubscription {\n  return _addListener(EventType.AnchorsDidUpdate, listener);\n}\n\nexport function onCameraDidChangeTrackingState(\n  listener: (event: { trackingState: TrackingState, trackingStateReason: TrackingStateReason }) => void\n): EmitterSubscription {\n  return _addListener(EventType.CameraDidChangeTrackingState, listener);\n}\n\nexport function onSessionWasInterrupted(\n  listener: (event: {}) => void\n): EmitterSubscription {\n  return _addListener(EventType.SessionWasInterrupted, listener);\n}\n\nexport function onSessionInterruptionEnded(\n  listener: (event: {}) => void\n): EmitterSubscription {\n  return _addListener(EventType.SessionInterruptionEnded, listener);\n}\n\nfunction _addListener(eventType: EventType, event: (...args: any[]) => void): EmitterSubscription {\n  return AREventEmitter.addListener(eventType as any, event);\n}\n\nexport function removeAllListeners(eventType?: EventType): void {\n  AREventEmitter.removeAllListeners(eventType as any);\n}\n\n// TODO: support multiple types (take an array or bit flags)\nexport function performHitTest(point: Vector2, types: HitTestResultTypes): HitTestResults {\n  return ExpoAR.performHitTest(point, types);\n}\n\nexport async function setDetectionImagesAsync(images: { [name: string]: DetectionImage }): Promise<void> {\n  return ExpoAR.setDetectionImagesAsync(images);\n}\n\nexport async function getCurrentFrameAsync(attributes?: ARFrameRequest): Promise<ARFrame> {\n  return ExpoAR.getCurrentFrameAsync(attributes);\n}\n\nexport async function getMatricesAsync(near: number, far: number): Promise<ARMatrices> {\n  return ExpoAR.getMatricesAsync(near, far);\n}\n\nexport async function stopAsync(): Promise<void> {\n  return ExpoAR.stopAsync();\n}\n\n\nexport async function startAsync(\n  node: number | React.Component,\n  configuration: TrackingConfiguration\n): Promise<{ capturedImageTexture: number }> {\n  if (typeof node === 'number') {\n    return await ExpoAR.startAsync(node, configuration);\n  } else {\n    const handle = findNodeHandle(node);\n    if (handle === null) {\n      throw new Error(`Could not find the React node handle for the AR component: ${node}`);\n    }\n    return await ExpoAR.startAsync(handle, configuration);\n  }\n}\n\nexport function reset() {\n  ExpoAR.reset();\n}\n\nexport function resume() {\n  ExpoAR.resume();\n}\n\nexport function pause() {\n  ExpoAR.pause();\n}\n\nexport async function setConfigurationAsync(configuration: TrackingConfiguration): Promise<void> {\n  await ExpoAR.setConfigurationAsync(configuration);\n}\n\nexport function getProvidesAudioData(): boolean {\n  return ExpoAR.getProvidesAudioData();\n}\n\nexport function setProvidesAudioData(providesAudioData: boolean): void {\n  ExpoAR.setProvidesAudioData(providesAudioData);\n}\n\nexport async function setPlaneDetectionAsync(planeDetection: PlaneDetection): Promise<void> {\n  return ExpoAR.setPlaneDetectionAsync(planeDetection);\n}\n\nexport function getPlaneDetection(): PlaneDetection {\n  return ExpoAR.getPlaneDetection();\n}\n\nexport async function getCameraTextureAsync(): Promise<number> {\n  return ExpoAR.getCameraTextureAsync();\n}\n\nexport async function setWorldOriginAsync(matrix_float4x4: Matrix): Promise<void> {\n  await ExpoAR.setWorldOriginAsync(matrix_float4x4);\n}\n\nexport function setLightEstimationEnabled(isLightEstimationEnabled: boolean) {\n  ExpoAR.setLightEstimationEnabled(isLightEstimationEnabled);\n}\n\nexport function getLightEstimationEnabled(): boolean {\n  return ExpoAR.getLightEstimationEnabled();\n}\n\nexport function setAutoFocusEnabled(isAutoFocusEnabled: boolean): void {\n  ExpoAR.setAutoFocusEnabled(isAutoFocusEnabled);\n}\n\nexport function getAutoFocusEnabled(): boolean {\n  return ExpoAR.getAutoFocusEnabled();\n}\n\nexport function setWorldAlignment(worldAlignment: WorldAlignment): void {\n  ExpoAR.setWorldAlignment(worldAlignment);\n}\n\nexport function getWorldAlignment(): WorldAlignment {\n  return ExpoAR.getWorldAlignment();\n}\n\nexport function isConfigurationAvailable(configuration: TrackingConfiguration): boolean {\n  const { width, height } = Dimensions.get('window');\n  // @ts-ignore: re-evaluate this for the new iPhones (2018)\n  const isX = (width === 812 || height === 812) && !Platform.isTVOS && !Platform.isPad;\n  if (configuration === TrackingConfiguration.Face && isX && isAvailable()) {\n    return true;\n  }\n  return !!ExpoAR[configuration];\n}\n\nexport function getSupportedVideoFormats(configuration: TrackingConfiguration): VideoFormat[] {\n  const videoFormats = {\n    [TrackingConfiguration.World]: 'WorldTrackingVideoFormats',\n    [TrackingConfiguration.Orientation]: 'OrientationTrackingVideoFormats',\n    [TrackingConfiguration.Face]: 'FaceTrackingVideoFormats',\n  };\n  const videoFormat = videoFormats[configuration];\n  return ExpoAR[videoFormat] || [];\n}\n\nexport function isFrontCameraAvailable(): boolean {\n  return isConfigurationAvailable(TrackingConfiguration.Face);\n}\n\nexport function isRearCameraAvailable(): boolean {\n  return isConfigurationAvailable(TrackingConfiguration.World);\n}\n\nexport function getVersion(): string {\n  return ExpoAR.ARKitVersion;\n}\n"]}